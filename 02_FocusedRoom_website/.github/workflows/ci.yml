name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort ruff mypy
        pip install -r requirements.txt

    - name: Check code formatting with Black
      run: |
        black --check --diff app/ tests/

    - name: Lint with Flake8
      run: |
        flake8 app/ tests/ --count --statistics

    - name: Lint with Ruff
      run: |
        ruff check app/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff app/ tests/

    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt

    - name: Run Safety check
      run: |
        safety check --json
      continue-on-error: true

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json
      continue-on-error: true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify application can start
      run: |
        python -c "from app import create_app; app = create_app(); print('✅ Application created successfully')"

    - name: All checks passed
      run: |
        echo "✅ All CI/CD checks passed successfully!"
